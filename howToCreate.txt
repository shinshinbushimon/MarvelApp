データの格納：完了
データの取得法：
    mongodbのlocalhost: 27017ポートに接続してキャラクタを取得してレンダリングするページごとに表示する形式に
検索機能：
    nameがchangeされるたびに、少し時間をおいてname属性が部分一致または全体一致のキャラクターをmongodbから取得して画面に表示する

関連コンテンツの取得：
    Characterのリスト画面を押下すると関連のコンテンツを含んだ詳細画面が表示される。
    関連コンテンツはAPIのエンドポイントと紐づいておりこれを押下したとたんサーバ側のapp.getで登録している任意のマウントポイントにフロントサイドからアクセスし
    server.jsは、APIのurlを生成し結果を取得してレスポンスとして返す。フロントエンドはコンテンツ関連画面として関連コンテンツの情報が記載された画面をレンダリングする

testpoint1:
    MongoDBへ値を取得してデータをレンダリングできていることを確認
    issues:
        リスト画面が常に下部に表示され、詳細画面をレンダリングしても残ったままになっている。
        approach:
            routerの階層がおかしいので検索機能を追加してpage単位にして追加 ☞ ✖
            最上位階層にリストコンポーネントを直接記載していたので取り除き、Routesを修正した ☞ 〇

testpoint2:
    検索機能が実装できていることを確認　☞　上記の検索機能を参照

testpoint3:
    関連コンテンツの取得を確認　☞　dbから取得したapiデータを基にエンドポイントとユーザ名等を生成してdataFetchすること


testpoint2案:
    検索で使用する専用のデータ構造を保持すること ☞ Recoilで制御
    このデータ構造を検知して検索結果コンポーネント表示を切り替えること
    検索記入欄の記載が亡くなるとコンポーネントの表示を切ること
    inputFieldのonChangeで変化を探知し、検索関数を実行
    検索関数：
        少し待つ
        部分一致するデータをdbから取得し、atomのrecoilStateを使用して保持データ配列を更新する
    
    設計案：
        データ構造：配列
        データ構造の管理方法：recoilAtom
        検索欄の値はatomで管理して、onChangeで更新
        検索欄の値をuseEffectで監視したcustomHooksを作成する。
        customHooks:
            useEffectでrecoilAtomの検索欄の値が変更されるとMongoドライバにnameの部分一致のクエリを指定して検索で使用するデータ構造を更新する。
        
        customHooksでは更新したデータ構造と更新関数のセットを返し、検索結果の有無をCharacterDefaultで評価すること

        issues:
            検索欄が空欄に変わったときにすべてのデータを取得しに行ってるっぽい
            検索の要素は分かるようにスタイルを変えないと後、検索したけど結果がない状態でちゃんと表示されるようにしないと
            ☞　〇

            検索時に表示される、未キャッシュの値をmongoから表示させないといけない。キャッシュデータしか見に行っていないのでここでエラーになっている。
            新たに、taretCharacterIdというatomを追加して監視対象とする
            targetCharacterIdをセットして、変更を監視detail画面がレンダリング対象になったときにidを変更する。
            targetCharacterIdによってuseEffectを実行すること
            親コンポネントでは、カスタムフックを宣言
            searchedDataという名前で管理対象とする、キャッシュから取得しようがデータベースから取得しようが同じ　

        nextaction:
            comicsなどの関連コンテンツのAPI取得
            ユーザ名とパスワードでの関係データベース管理の追加
            お気に入り機能とお気に入りページの追加
            footerにコピーライトの記載


character詳細画面から、各関連データ取得の状態整理
☞
characterDetailの情報：
    comic等のエンドポイント、offset、などデータ全般

customHooksで達成させたいこと：

改修対象：
    20件しか取れていないスクロール処理ですべて取得できるように
    データの取得途中なのか、データがこれ以上ないのかそもそもないのかわからない
    文言を変える必要がある
    comic以外も実装できること
    関係データベースの使用とお気に入り機能
    型定義（インターフェース）の構造化

nextAction:
    scrollが無限に取れてしまっているので、ここを改善、また、limit=20以降のデータも取れるように ☞　完
    storiesが変　☞　完
    詳細画面を作る & 画面の遷移ルーティング　☞着手
    関係データベースの使用とお気に入り機能
    型定義（インターフェース）の構造化
    UI全般
　　　　　



サーバーサイド実装：
    ・初期起動時にserver.jsでキャッチするルーティング
    ・requset.sessionにユーザidが格納されているか y/n
      y: Mongoセッションストアから該当のお気に入りデータを取得しログイン状態を復元する
      n: 手動ログインのための画面へリダイレクト
    ・手動ログインまたは新規登録操作：
    　・フロント側と同じバリデーションをもう一度実施し、エラーになる場合サーバからjson({success: boolean, message: string})の形式で投げる。
    　・RDBMSへアカウント存在するかの確認。新規登録の場合はユーザidの重複がないかの確認。


next:
    ・MongoDBに、favoritesというコレクションを追加すること✓
    ・ログイン時の処理と新規登録処理をサーバで実装する。
    ・フロント側でレスポンス情報を確認すること。
      New !!!! ☞ これからフロントの最上位コンポネントで初期起動時のセッション確認操作等を実施すること


    ・クラウドでのDBサーバ構築

初期起動時のカスタムフックス：
    ・サーバの一番初めのエンドポイントで宣言する
    ・jsonデータを受け取りその値を基に画面遷移を行う。


修正対象：
    ・データベース格納でデータのハッシュ化
    ・セッションに保存または適切に取り出せていない
    ・検索機能が空白になったタイミングで検索が行われてるっぽい
    ・DeepLの開発者プランで翻訳
    ✓・ページネーションは一ページずつでなく、指定された数値で行うGoogleみたいに123..5
    ・検索ボタン押下で検索入力欄の表示
    ・起動時にfavoritesコレクションからお気に入りキャラidを取得
    ・キャラクター名以外からも検索ができるように

・ローカルのSSHキーを使ってwebserverへ転送するためのコマンド
scp -i C:\Users\NDO01\OneDrive\デスクトップ\credencials\MarvelTokyoKeyPair.pem public/bundle.js ec2-user@43.206.233.150:/var/www/marvel-project/public


const mongoUrl = 
`mongodb://<username>:<password>@<your-cluster-endpoint>:27017/<database>?tls=true&replicaSet=rs0&readPreference=secondaryPreferred&retryWrites=false`;
const tlsCAFilePath = 'path/to/your/global-bundle.pem';

let db;

MongoClient.connect(mongoUrl, { tlsCAFile: tlsCAFilePath }, function(err, client) {
  if (err) throw err;

  