データの格納：完了
データの取得法：
    mongodbのlocalhost: 27017ポートに接続してキャラクタを取得してレンダリングするページごとに表示する形式に
検索機能：
    nameがchangeされるたびに、少し時間をおいてname属性が部分一致または全体一致のキャラクターをmongodbから取得して画面に表示する

関連コンテンツの取得：
    Characterのリスト画面を押下すると関連のコンテンツを含んだ詳細画面が表示される。
    関連コンテンツはAPIのエンドポイントと紐づいておりこれを押下したとたんサーバ側のapp.getで登録している任意のマウントポイントにフロントサイドからアクセスし
    server.jsは、APIのurlを生成し結果を取得してレスポンスとして返す。フロントエンドはコンテンツ関連画面として関連コンテンツの情報が記載された画面をレンダリングする

testpoint1:
    MongoDBへ値を取得してデータをレンダリングできていることを確認
    issues:
        リスト画面が常に下部に表示され、詳細画面をレンダリングしても残ったままになっている。
        approach:
            routerの階層がおかしいので検索機能を追加してpage単位にして追加 ☞ ✖
            最上位階層にリストコンポーネントを直接記載していたので取り除き、Routesを修正した ☞ 〇

testpoint2:
    検索機能が実装できていることを確認　☞　上記の検索機能を参照

testpoint3:
    関連コンテンツの取得を確認　☞　dbから取得したapiデータを基にエンドポイントとユーザ名等を生成してdataFetchすること


testpoint2案:
    検索で使用する専用のデータ構造を保持すること ☞ Recoilで制御
    このデータ構造を検知して検索結果コンポーネント表示を切り替えること
    検索記入欄の記載が亡くなるとコンポーネントの表示を切ること
    inputFieldのonChangeで変化を探知し、検索関数を実行
    検索関数：
        少し待つ
        部分一致するデータをdbから取得し、atomのrecoilStateを使用して保持データ配列を更新する
    
    設計案：
        データ構造：配列
        データ構造の管理方法：recoilAtom
        検索欄の値はatomで管理して、onChangeで更新
        検索欄の値をuseEffectで監視したcustomHooksを作成する。
        customHooks:
            useEffectでrecoilAtomの検索欄の値が変更されるとMongoドライバにnameの部分一致のクエリを指定して検索で使用するデータ構造を更新する。
        
        customHooksでは更新したデータ構造と更新関数のセットを返し、検索結果の有無をCharacterDefaultで評価すること

        issues:
            検索欄が空欄に変わったときにすべてのデータを取得しに行ってるっぽい
            検索の要素は分かるようにスタイルを変えないと後、検索したけど結果がない状態でちゃんと表示されるようにしないと
            ☞　〇

            検索時に表示される、未キャッシュの値をAPIで取得して表示させないといけない。キャッシュデータしか見に行っていないのでここでエラーになっている。

        nextaction:
            comicsなどの関連コンテンツのAPI取得
            ユーザ名とパスワードでの関係データベース管理の追加
            お気に入り機能とお気に入りページの追加
