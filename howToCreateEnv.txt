VPCの構築
    ・IGWをアタッチ
    ・三つのEC2インスタンスを用意
        1. Webサーバ用インスタンス ☞ nginXをインストールしてリクエストに対してhtml, css, bundle.jsを返す
        2. RDSインスタンス ☞ mysqlでユーザアカウント情報を管理
        3. DocumentDBインスタンス ☞ APIデータを格納

    ・パブリックサブネットとプライベートサブネットを作成
    ・パブリックサブネットは80番HTTPリクエストのみすべてのアドレスポートから受け付けるルートテーブル設定
    ・プライベートサブネットはWebサーバからのインバウンドしか受け付けないルートテーブルを設定
    ・Route53によってプライベートサブネットに名前解決を実施

Dockerで開発環境、本番環境の再現

CircleCIで、ビルド、テスト、デプロイの自動化

GitHub Issuesの使い方

手順：
　・EC2, DB用のインスタンスのセキュリティグループを作成
　・複数のAZプライベートサブネットとパブリックサブネットを作成
　・EC2, 二つのDBが属するサブネット用のルートテーブルの設定
　・EC2, RDS, DocumentDBのインスタンスを作成し、上記で作成したセキュリティグループ、サブネットを設定する


本番環境構築手順：
・Route53でドメインを購入
・EC2のnginXのserver_nameを変更
・ブラウザからのリクエストが受け付けていることを確認
・開発環境でリモートサーバを想定したソースコードの改修を行い、プッシュ&EC2でプル
・データベースマネジメント使ってRDS, DocumentDBのデータ格納
・サービスとしての動作確認
・Jenkinsの学習
・CI/CDの適応
・テスト作成、適応
・以後ソースコード改修


アクセスキー：kKcxhhCFa2LOmz356Gyz/ezMY/0kRsD5oAlJEUiw


記事のネタ：
DocumentDBへデータを格納するために、MongoCompassを使用して接続する
☞その際、DocumentDBはパブリックアクセスを提供しておらず、バスティオンホストのSSHトンネル経由で接続する必要があった。
　バスティオンホストのインスタンスを立ち上げ、セキュリティグループにSSH接続許可設定を追加し、mongodbへの接続をテストしたが、mongoshellをインストールする必要があった
　mongoshellはyum installでは足りず、/etc/yum.repos.d/mongo*.org-shellに設定を書き込んだうえで下記のコマンドを実行する必要があった
　・sudo yum install -y mongodb-org-shell
　しかし、依存関係の衝突が起きたというメッセージが。。
　そこでコンテナを使用し、ホストOSに影響を与えない範囲で実行することに
　sudo yum update -y
    sudo yum install -y docker
    sudo systemctl start docker
    sudo systemctl enable docker

　sudo docker run -it --rm -v /home/ec2-user/certs:/certs mongo mongosh --host marvelapidocumentdbs.cluster-cbycq6848fnf.ap-northeast-1.docdb.amazonaws.com --port 27017 --username FirstMarvelAdmin --password Fujimoto528 --tlsCAFile /certs/global-bundle.pem --tls
　ここで接続が成功
　
　あとは、ローカルに、CA認証ファイルをダウンロードして、MongoCompassに接続完了！


dockerでmongo接続コマンド
docker run -it --rm -v ~/certs:/certs mongo mongosh --host marvelapidocumentdbs.cluster-cbycq6848fnf.ap-northeast-1.docdb.amazonaws.com --port 27017 --username FirstMarvelAdmin --password Fujimoto528 --tlsCAFile /certs/global-bundle.pem --tls


dataImporter.jsの中身
require('dotenv').config();
const axios = require('axios');
const { MongoClient } = require('mongodb');

const mongoUri = `mongodb://${process.env.MONGO_INITDB_ROOT_USERNAME}:${process.                                                                             env.MONGO_INITDB_ROOT_PASSWORD}@localhost:27017/myMarvelDatabase?authSource=admi                                                                             n`;

const dbName = 'marvel';
const client = new MongoClient(mongoUri, { useNewUrlParser: true, useUnifiedTopo                                                                             logy: true });

const fetchAllMarvelCharacters = async () => {
    const characters = [];
    const publicKey = process.env.MARVEL_API_PUBLIC_KEY;
    const privateKey = process.env.MARVEL_API_PRIVATE_KEY;
    let total = 0, offset = 0, limit = 20;

    do {
        const ts = new Date().getTime();
        const hash = require('crypto').createHash('md5').update(ts + privateKey                                                                              + publicKey).digest('hex');
        const url = `http://gateway.marvel.com/v1/public/characters?ts=${ts}&api                                                                             key=${publicKey}&hash=${hash}&limit=${limit}&offset=${offset}`;

        try {
            const response = await axios.get(url);
            characters.push(...response.data.data.results);
            total = response.data.data.total;
            offset += response.data.data.count;
        } catch (error) {
            console.error('Error fetching Marvel characters:', error);
            break;
        }
    } while (offset < total);

    return characters;
};

const refreshCharactersInMongo = async (characters) => {
    try {
        await client.connect();
        console.log('Connected successfully to MongoDB server');
        const db = client.db(dbName);
        const collection = db.collection('characters');

        // 既存のデータを削除
        await collection.deleteMany({});
        // 新しいデータを挿入
        await collection.insertMany(characters);
        console.log('Characters refreshed in MongoDB');
    } catch (error) {
        console.error('Error refreshing characters in MongoDB:', error);
    } finally {
        await client.close();
    }
};

const refreshData = async () => {
    const characters = await fetchAllMarvelCharacters();
    if (characters.length > 0) {
        await refreshCharactersInMongo(characters);
    } else {
        console.log('No characters to refresh');
    }
};

refreshData();

・次環境構築アクション
　⇒統合テストを書いて、テスト環境（現在の本番環境）に配置
　☞本番環境とテスト環境はnode.jsとnginxのコンテナを使用して動作させる
　☞両者はKubernetesを使用して実装　